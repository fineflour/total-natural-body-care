class PtsrcsController < ApplicationController
  include ActionView::Helpers::AssetUrlHelper
  respond_to :html, :json, :js
  def index

    if (params[:key])
      security_key(params[:key])
    end if

    menu_values
    @ptsrcs =  ptsrc_for_index  
  end


  def show
    menu_values
    @ptsrc = Ptsrc.find(params[:id])
    binding.pry
    pdf_attachment = get_pdf(@ptsrc.link)
    send_file pdf_attachment.public_filename,
      :type => pdf_attachment.content_type,
      :file_name => pdf_attachment.filename,
      :disposition => 'inline'
    # pdf_filename = ActionController::Base.helpers.asset_path("1.pdf").to_s
    #pdf_filename = ActionController::Base.helpers.asset_path(@ptsrc.link).to_s

    # binding.pry
    #send_file(pdf_filename, :filename => "youkr_document.pdf", :type => "application/pdf")
    # send_file(pdf_filename, :disposition => "inline", :type => "application/pdf")
  end

  def new
    menu_values
    @ptsrc = Ptsrc.new
  end

  def create
    menu_values
    @ptsrc = Ptsrc.new(ptsrc_params)
    if @ptsrc.save
      flash[:notice] = "ptsrc created successfully!"
      redirect_to ptsrcs_path
    else
      flash[:error] = "ptsrc could not be saved."
      render action: :new
    end
  end

  def edit
    menu_values
    @ptsrc = Ptsrc.find(params[:id])
  end

  def update
    menu_values
    @ptsrc = Ptsrc.find(params[:id])
    @ptsrc.update_attributes(ptsrc_params)

    if @ptsrc.save
      redirect_to @ptsrc, notice: "Successfully updated"
    else
      flash[:error] = "ptsrc cannot be updated. Try again"
      render :edit
    end
  end

  def destroy
    menu_values
    @ptsrc = Ptsrc.find(params[:id]).destroy
    flash[:notice] = "ptsrc successfully deleted"
    redirect_to ptsrcs_path
  end

  private 
  def ptsrc_for_index
    Ptsrc.order("created_at DESC").
      #includes(:products, :orderproducts, :orderproduct_transitions).
      # text_search(params[:query]).
      paginate(page: params[:page])
  end

  def ptsrc_params
    params.require(:ptsrc)
      .permit(:category, :title, :body, :link, :attached, :link, :active)
  end

  def menu_values
    menu_values ||= YAML.load((File.open("#{Rails.root}/config/menues.yml", 'r')))
    id = 400

    for n in menu_values
      if (n["id"] == id)
        @menu_values = n
      end
    end
  end

  def security_key(key)
    if key =='Genesis1:26***'
      @admin = true
    end
  end

  def get_pdf(file)
    if (file)
      @pdf_filename = asset_path(file)
    end
  end
end
